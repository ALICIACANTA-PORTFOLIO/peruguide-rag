[build-system]
requires = ["setuptools>=65.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "peruguide-rag"
version = "0.1.0"
description = "Production-ready RAG system for Peru tourism information"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "Your Name", email = "your.email@example.com"}
]
keywords = ["rag", "llm", "langchain", "peru", "tourism", "nlp"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    "langchain>=0.1.0",
    "langchain-community>=0.0.20",
    "sentence-transformers>=2.2.0",
    "faiss-cpu>=1.7.4",
    "chromadb>=0.4.0",
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "streamlit>=1.28.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "python-dotenv>=1.0.0",
    "structlog>=23.2.0",
    "prometheus-client>=0.19.0",
    "pypdf>=3.17.0",
    "ragas>=0.1.0",
    "numpy>=1.24.0",
    "pandas>=2.0.0",
    "torch>=2.0.0",
    "transformers>=4.35.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "pytest-timeout>=2.2.0",
    "black>=23.12.0",
    "ruff>=0.1.9",
    "mypy>=1.7.0",
    "pre-commit>=3.6.0",
    "ipykernel>=6.27.0",
    "jupyter>=1.0.0",
]

docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.5.0",
    "mkdocstrings[python]>=0.24.0",
]

all = [
    "peruguide-rag[dev,docs]",
]

[project.urls]
Homepage = "https://github.com/yourusername/peruguide-rag"
Documentation = "https://yourusername.github.io/peruguide-rag"
Repository = "https://github.com/yourusername/peruguide-rag"
Issues = "https://github.com/yourusername/peruguide-rag/issues"

[tool.setuptools.packages.find]
where = ["."]
include = ["src*", "api*", "app*"]
exclude = ["tests*", "docs*", "notebooks*"]

[tool.black]
line-length = 100
target-version = ['py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | notebooks
)/
'''

[tool.ruff]
line-length = 100
target-version = "py310"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "C",   # flake8-comprehensions
    "B",   # flake8-bugbear
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]
exclude = [
    ".git",
    ".mypy_cache",
    ".ruff_cache",
    ".venv",
    "__pycache__",
    "notebooks",
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # unused imports in __init__.py

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
exclude = [
    "notebooks/",
    "tests/",
]

[[tool.mypy.overrides]]
module = [
    "langchain.*",
    "faiss.*",
    "chromadb.*",
    "sentence_transformers.*",
    "ragas.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov=api",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
timeout = 300
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src", "api"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]
precision = 2
show_missing = true

[tool.coverage.html]
directory = "htmlcov"
